"""
–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–∏–∞–≥—Ä–∞–º–º –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤
–†–ï–§–ê–ö–¢–û–†–ò–ù–ì: –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
"""
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import pandas as pd
import json
from pathlib import Path
from typing import Dict, Any
from models import Choices
from config import CRITICAL_MIN_INPUTS, CRITICAL_MIN_REUSE
# –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢ - –±–µ–∑ —Ü–∏–∫–ª–∞!
from core_api import run_with_gui

class BusinessProcessGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∏–∞–≥—Ä–∞–º–º –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ v3.0")
        self.root.geometry("950x750")
        self.root.minsize(850, 700)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config_file = Path("bp_config.json")
        self.config = self.load_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self._init_variables()
        self.create_widgets()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—Å—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –≤—ã–±—Ä–∞–Ω
        if self.excel_path.get() and Path(self.excel_path.get()).exists():
            self.load_sheet_names()
        
    def _init_variables(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.excel_path = tk.StringVar(value=self.config.get('excel_path', ''))
        self.sheet_name = tk.StringVar(value=self.config.get('sheet_name', ''))
        self.sheet_names = []
        self.output_base = tk.StringVar(value=self.config.get('output_base', 'business_process_diagram'))
        self.output_format = tk.StringVar(value=self.config.get('output_format', 'html_mermaid'))
        self.subgroup_column = tk.StringVar(value=self.config.get('subgroup_column', ''))
        self.show_detailed = tk.BooleanVar(value=self.config.get('show_detailed', False))
        self.critical_min_inputs = tk.IntVar(value=self.config.get('critical_min_inputs', CRITICAL_MIN_INPUTS))
        self.critical_min_reuse = tk.IntVar(value=self.config.get('critical_min_reuse', CRITICAL_MIN_REUSE))
        self.no_grouping = tk.BooleanVar(value=self.config.get('no_grouping', True))
        
        # CLD –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.cld_source_type = tk.StringVar(value=self.config.get('cld_source_type', 'auto'))
        self.cld_sheet_name = tk.StringVar(value=self.config.get('cld_sheet_name', ''))
        self.show_cld_operations = tk.BooleanVar(value=self.config.get('show_cld_operations', True))
        self.cld_influence_signs = tk.BooleanVar(value=self.config.get('cld_influence_signs', True))
        
        # UI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.sheet_combobox = None
        self.cld_sheet_combobox = None
        self.cld_frame = None
        self.group_combo = None
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel.")
        
    def load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        if self.config_file.exists():
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return {}
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        try:
            config = {
                'excel_path': self.excel_path.get(),
                'sheet_name': self.sheet_name.get(),
                'output_base': self.output_base.get(),
                'output_format': self.output_format.get(),
                'subgroup_column': self.subgroup_column.get(),
                'show_detailed': self.show_detailed.get(),
                'critical_min_inputs': self.critical_min_inputs.get(),
                'critical_min_reuse': self.critical_min_reuse.get(),
                'no_grouping': self.no_grouping.get(),
                'cld_source_type': self.cld_source_type.get(),
                'cld_sheet_name': self.cld_sheet_name.get(),
                'show_cld_operations': self.show_cld_operations.get(),
                'cld_influence_signs': self.cld_influence_signs.get()
            }
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def load_sheet_names(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ª–∏—Å—Ç–æ–≤ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ Excel"""
        try:
            excel_file = pd.ExcelFile(self.excel_path.get(), engine="openpyxl")
            self.sheet_names = excel_file.sheet_names
            
            # –û–±–Ω–æ–≤–ª—è–µ–º combobox –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
            self.sheet_combobox['values'] = self.sheet_names
            
            # –û–±–Ω–æ–≤–ª—è–µ–º combobox –¥–ª—è CLD –ª–∏—Å—Ç–∞
            self.cld_sheet_combobox['values'] = self.sheet_names
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
            if self.sheet_names:
                if self.sheet_name.get() in self.sheet_names:
                    self.sheet_combobox.set(self.sheet_name.get())
                else:
                    # –ò—â–µ–º –ª–∏—Å—Ç —Å —Ç–∏–ø–∏—á–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
                    default_sheets = ['–ë–ü_1', 'Sheet1', '–õ–∏—Å—Ç1', 'Data']
                    for sheet in default_sheets:
                        if sheet in self.sheet_names:
                            self.sheet_combobox.set(sheet)
                            self.sheet_name.set(sheet)
                            break
                    else:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
                        self.sheet_combobox.set(self.sheet_names[0])
                        self.sheet_name.set(self.sheet_names[0])
            
            self.status_var.set(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.sheet_names)} –ª–∏—Å—Ç–æ–≤")
            
        except Exception as e:
            self.status_var.set(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª Excel:\n{e}")
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ –∏ —Å—Ç—Ä–æ–∫ –¥–ª—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏—è
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∏–∞–≥—Ä–∞–º–º –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ v3.0", 
                               font=('Arial', 16, 'bold'))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        row = 1
        
        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ Excel
        ttk.Label(main_frame, text="–§–∞–π–ª Excel:*", font=('Arial', 10, 'bold')).grid(row=row, column=0, sticky=tk.W, pady=2)
        file_frame = ttk.Frame(main_frame)
        file_frame.grid(row=row, column=1, columnspan=2, sticky=(tk.W, tk.E), pady=2)
        file_frame.columnconfigure(0, weight=1)
        
        file_entry = ttk.Entry(file_frame, textvariable=self.excel_path)
        file_entry.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=(0, 5))
        ttk.Button(file_frame, text="–û–±–∑–æ—Ä...", command=self.browse_file).grid(row=0, column=1)
        row += 1
        
        # –í—ã–±–æ—Ä –ª–∏—Å—Ç–∞
        ttk.Label(main_frame, text="–õ–∏—Å—Ç:*", font=('Arial', 10, 'bold')).grid(row=row, column=0, sticky=tk.W, pady=2)
        sheet_frame = ttk.Frame(main_frame)
        sheet_frame.grid(row=row, column=1, columnspan=2, sticky=(tk.W, tk.E), pady=2)
        
        self.sheet_combobox = ttk.Combobox(sheet_frame, textvariable=self.sheet_name, state="readonly", width=30)
        self.sheet_combobox.grid(row=0, column=0, sticky=(tk.W, tk.E))
        self.sheet_combobox.bind('<<ComboboxSelected>>', self.on_sheet_selected)
        
        ttk.Button(sheet_frame, text="–û–±–Ω–æ–≤–∏—Ç—å", command=self.load_sheet_names, width=10).grid(row=0, column=1, padx=(5, 0))
        sheet_frame.columnconfigure(0, weight=1)
        row += 1
        
        # –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        ttk.Label(main_frame, text="–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:").grid(row=row, column=0, sticky=tk.W, pady=2)
        ttk.Entry(main_frame, textvariable=self.output_base, width=30).grid(row=row, column=1, sticky=tk.W, pady=2)
        row += 1
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        ttk.Separator(main_frame, orient='horizontal').grid(row=row, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=15)
        row += 1
        
        # –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
        ttk.Label(main_frame, text="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:", font=('Arial', 10, 'bold')).grid(row=row, column=0, sticky=tk.W, pady=2)
        format_frame = ttk.Frame(main_frame)
        format_frame.grid(row=row, column=1, columnspan=2, sticky=(tk.W, tk.E), pady=2)

        formats = [
            ("üìÑ Markdown —Å Mermaid", "md"),
            ("üåê HTML —Å Mermaid (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", "html_mermaid"),
            ("üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π HTML", "html_interactive"),
            ("üîÑ Causal Loop Diagram (Mermaid)", "cld_mermaid"),
            ("üîÑ Causal Loop Diagram (Interactive)", "cld_interactive")
        ]

        for i, (text, value) in enumerate(formats):
            rb = ttk.Radiobutton(format_frame, text=text, variable=self.output_format, 
                                value=value, command=self.on_format_change)
            rb.grid(row=i//3, column=i%3, sticky=tk.W, padx=(0, 20), pady=2)
        row += 2  # –£–º–µ–Ω—å—à–∏–ª —Å 3 –¥–æ 2 —Ç–∫ –º–µ–Ω—å—à–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤
        
        # –°–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ CLD (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–∞)
        self.cld_frame = ttk.LabelFrame(main_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Causal Loop Diagram", padding="10")
        self.cld_frame.grid(row=row, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=10)
        self.cld_frame.grid_remove()  # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö CLD
        ttk.Label(self.cld_frame, text="–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:").grid(row=0, column=0, sticky=tk.W, pady=2)
        source_frame = ttk.Frame(self.cld_frame)
        source_frame.grid(row=0, column=1, columnspan=2, sticky=(tk.W, tk.E), pady=2)
        
        ttk.Radiobutton(source_frame, text="–ê–≤—Ç–æ –∏–∑ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤", 
                       variable=self.cld_source_type, value="auto", 
                       command=self.on_cld_source_change).grid(row=0, column=0, sticky=tk.W)
        ttk.Radiobutton(source_frame, text="–ò–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–∏—Å—Ç–∞", 
                       variable=self.cld_source_type, value="manual",
                       command=self.on_cld_source_change).grid(row=0, column=1, sticky=tk.W, padx=(20, 0))
        
        # –í—ã–±–æ—Ä –ª–∏—Å—Ç–∞ –¥–ª—è CLD
        ttk.Label(self.cld_frame, text="–õ–∏—Å—Ç CLD –¥–∞–Ω–Ω—ã—Ö:").grid(row=1, column=0, sticky=tk.W, pady=2)
        self.cld_sheet_combobox = ttk.Combobox(self.cld_frame, textvariable=self.cld_sheet_name, 
                                              state="readonly", width=30)
        self.cld_sheet_combobox.grid(row=1, column=1, sticky=tk.W, pady=2)
        self.cld_sheet_combobox.bind('<<ComboboxSelected>>', self.on_cld_sheet_selected)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è CLD
        ttk.Checkbutton(self.cld_frame, text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ —Å–≤—è–∑—è—Ö",
                       variable=self.show_cld_operations).grid(row=2, column=0, columnspan=2, sticky=tk.W, pady=2)
        ttk.Checkbutton(self.cld_frame, text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∑–Ω–∞–∫–∏ –≤–ª–∏—è–Ω–∏—è (+/-)",
                       variable=self.cld_influence_signs).grid(row=3, column=0, columnspan=2, sticky=tk.W, pady=2)
        
        row += 1
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞
        ttk.Label(main_frame, text="–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π:").grid(row=row, column=0, sticky=tk.W, pady=2)
        group_frame = ttk.Frame(main_frame)
        group_frame.grid(row=row, column=1, columnspan=2, sticky=(tk.W, tk.E), pady=2)
        
        ttk.Radiobutton(group_frame, text="–ë–µ–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏", variable=self.no_grouping,
                       value=True, command=self.on_grouping_change).grid(row=0, column=0, sticky=tk.W)
        ttk.Radiobutton(group_frame, text="–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ:", variable=self.no_grouping,
                       value=False, command=self.on_grouping_change).grid(row=0, column=1, sticky=tk.W)
        
        self.group_combo = ttk.Combobox(group_frame, textvariable=self.subgroup_column, 
                                       values=['–ì—Ä—É–ø–ø–∞', '–í–ª–∞–¥–µ–ª–µ—Ü'], state='readonly', width=15)
        self.group_combo.grid(row=0, column=2, sticky=tk.W, padx=(5, 0))
        row += 1
        
        # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        ttk.Checkbutton(main_frame, text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —É–∑–ª–∞—Ö", 
                       variable=self.show_detailed).grid(row=row, column=0, columnspan=2, sticky=tk.W, pady=2)
        row += 1
        
        # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        ttk.Label(main_frame, text="–ü–æ—Ä–æ–≥–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:").grid(row=row, column=0, sticky=tk.W, pady=2)
        threshold_frame = ttk.Frame(main_frame)
        threshold_frame.grid(row=row, column=1, columnspan=2, sticky=(tk.W, tk.E), pady=2)
        
        ttk.Label(threshold_frame, text="–ú–∏–Ω. –≤—Ö–æ–¥–æ–≤:").grid(row=0, column=0, sticky=tk.W)
        ttk.Spinbox(threshold_frame, from_=1, to=20, textvariable=self.critical_min_inputs,
                   width=5).grid(row=0, column=1, sticky=tk.W, padx=(5, 15))
        
        ttk.Label(threshold_frame, text="–ú–∏–Ω. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –≤—ã—Ö–æ–¥–∞:").grid(row=0, column=2, sticky=tk.W)
        ttk.Spinbox(threshold_frame, from_=1, to=20, textvariable=self.critical_min_reuse,
                   width=5).grid(row=0, column=3, sticky=tk.W, padx=(5, 0))
        row += 1
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=row, column=0, columnspan=3, pady=25)
        
        ttk.Button(button_frame, text="üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É", 
                  command=self.generate_diagram, style='Accent.TButton', width=20).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
                  command=self.save_config, width=15).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", 
                  command=self.reset_config, width=15).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(button_frame, text="‚ùå –í—ã—Ö–æ–¥", 
                  command=self.root.quit, width=10).pack(side=tk.LEFT)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel.")
        status_bar = ttk.Label(main_frame, textvariable=self.status_var, relief=tk.SUNKEN, padding=(5, 5))
        status_bar.grid(row=row+1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(15, 0))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
        info_frame = ttk.LabelFrame(main_frame, text="–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤", padding="10")
        info_frame.grid(row=row+2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(15, 0))
        info_frame.columnconfigure(0, weight=1)

        features = [
            "üìÑ Markdown - –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∏ GitHub",
            "üåê HTML —Å Mermaid - –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ", 
            "üéÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π HTML - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è",
            "üîÑ Causal Loop - —Å–∏—Å—Ç–µ–º–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –∏ –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏"
        ]

        for i, feature in enumerate(features):
            ttk.Label(info_frame, text=feature).grid(row=i, column=0, sticky=tk.W, pady=2)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.on_format_change()
        self.on_grouping_change()
        self.on_cld_source_change()
    
    def on_sheet_selected(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞"""
        self.sheet_name.set(self.sheet_combobox.get())
    
    def on_cld_sheet_selected(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞ –¥–ª—è CLD"""
        self.cld_sheet_name.set(self.cld_sheet_combobox.get())
    
    def browse_file(self):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ"""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel",
            filetypes=[("Excel files", "*.xlsx *.xls"), ("All files", "*.*")]
        )
        if filename:
            self.excel_path.set(filename)
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤
            self.load_sheet_names()
            # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ Excel —Ñ–∞–π–ª–∞
            if not self.output_base.get() or self.output_base.get() == 'business_process_diagram':
                excel_stem = Path(filename).stem
                self.output_base.set(excel_stem + '_diagram')
            self.save_config()
    
    def on_format_change(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞"""
        current_format = self.output_format.get()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é CLD –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if current_format in ["cld_mermaid", "cld_interactive"]:
            self.cld_frame.grid()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º
        else:
            self.cld_frame.grid_remove()  # –°–∫—Ä—ã–≤–∞–µ–º
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        if current_format == "html_interactive":
            self.no_grouping.set(True)
            self.show_detailed.set(False)
            self.on_grouping_change()
        elif current_format == "html_svg":
            self.no_grouping.set(True)
            self.show_detailed.set(True)
            self.on_grouping_change()
    
    def on_cld_source_change(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ CLD –¥–∞–Ω–Ω—ã—Ö"""
        if self.cld_source_type.get() == "manual":
            self.cld_sheet_combobox.config(state="readonly")
        else:
            self.cld_sheet_combobox.config(state="disabled")
    
    def on_grouping_change(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"""
        if self.no_grouping.get():
            self.group_combo.config(state='disabled')
        else:
            self.group_combo.config(state='readonly')
    
    def reset_config(self):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.excel_path.set('')
        self.sheet_name.set('')
        self.sheet_combobox.set('')
        self.sheet_combobox['values'] = []
        self.cld_sheet_combobox.set('')
        self.cld_sheet_combobox['values'] = []
        self.output_base.set('business_process_diagram')
        self.output_format.set('html_svg')
        self.subgroup_column.set('')
        self.show_detailed.set(False)
        self.critical_min_inputs.set(CRITICAL_MIN_INPUTS)
        self.critical_min_reuse.set(CRITICAL_MIN_REUSE)
        self.no_grouping.set(True)
        
        # –°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ CLD
        self.cld_source_type.set('auto')
        self.cld_sheet_name.set('')
        self.show_cld_operations.set(True)
        self.cld_influence_signs.set(True)
        
        if self.config_file.exists():
            self.config_file.unlink()
        
        self.on_format_change()
        self.on_grouping_change()
        self.on_cld_source_change()
        self.status_var.set("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel.")
        messagebox.showinfo("–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    
    def generate_diagram(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã - –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ API"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ core_api.py, –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if not self.excel_path.get():
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel")
            return
        
        excel_path = Path(self.excel_path.get())
        if not excel_path.exists():
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {excel_path}")
            return
        
        try:
            self.status_var.set("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã...")
            self.root.update_idletasks()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Choices –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ GUI
            choices = Choices(
                subgroup_column=self.subgroup_column.get() if not self.no_grouping.get() else None,
                show_detailed=self.show_detailed.get(),
                critical_min_inputs=self.critical_min_inputs.get(),
                critical_min_reuse=self.critical_min_reuse.get(),
                no_grouping=self.no_grouping.get(),
                output_format=self.output_format.get(),
                cld_source_type=self.cld_source_type.get(),
                cld_sheet_name=self.cld_sheet_name.get(),
                show_cld_operations=self.show_cld_operations.get(),
                cld_influence_signs=self.cld_influence_signs.get()
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            self.save_config()
            
            # –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π core_api.py
            success = run_with_gui(excel_path, self.sheet_name.get(), choices, self.output_base.get())
            
            if success:
                self.status_var.set("–î–∏–∞–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
                messagebox.showinfo("–£—Å–ø–µ—Ö", 
                    f"–î–∏–∞–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    f"–§–∞–π–ª: {self.output_base.get()}.html\n\n"
                    f"–î–∏–∞–≥—Ä–∞–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ.")
            else:
                self.status_var.set("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã")
                # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ —á–µ—Ä–µ–∑ logging –≤ core_api.py
                
        except Exception as e:
            self.status_var.set(f"–û—à–∏–±–∫–∞: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã:\n{str(e)}")
        finally:
            self.root.update_idletasks()

def run_gui():
    """–ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    root = tk.Tk()
    
    # –°—Ç–∏–ª—å –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    style = ttk.Style()
    style.configure('Accent.TButton', foreground='white', background='#007cba')
    
    app = BusinessProcessGUI(root)
    root.mainloop()

if __name__ == "__main__":
    run_gui()