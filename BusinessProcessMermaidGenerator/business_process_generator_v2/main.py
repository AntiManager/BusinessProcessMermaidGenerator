"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –ì–ï–ù–ï–†–ê–¢–û–† –î–ò–ê–ì–†–ê–ú–ú –ë–ò–ó–ù–ï–°-–ü–†–û–¶–ï–°–°–û–í
"""
import logging
import webbrowser
from pathlib import Path
from config import REQ_COLUMNS
from models import Choices
from data_loader import load_and_validate_data, collect_operations
from analysis import analyse_network
from exporters.mermaid_exporter import export_mermaid
from exporters.html_exporter import export_html_mermaid
from exporters.interactive_exporter import export_interactive_html
from exporters.svg_exporter import export_svg_html

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
log = logging.getLogger(__name__)

def run_with_gui(excel_path: Path, sheet_name: str, choices: Choices, output_base: str) -> bool:
    """
    –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ GUI
    """
    try:
        print(f"‚úì –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {excel_path}")
        print(f"‚úì –í—ã–±—Ä–∞–Ω –ª–∏—Å—Ç: {sheet_name}")
        print(f"‚úì –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {output_base}")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        df = load_and_validate_data(excel_path, sheet_name, REQ_COLUMNS)
        if df is None:
            return False
        
        # –°–±–æ—Ä –æ–ø–µ—Ä–∞—Ü–∏–π
        operations = collect_operations(df, choices)
        if not operations:
            log.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã")
            return False

        # –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–∏
        analysis_data = analyse_network(operations, choices)

        # –≠–∫—Å–ø–æ—Ä—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if choices.output_format == "md":
            export_mermaid(operations, analysis_data, choices, df.columns.tolist(), output_base)
        elif choices.output_format == "html_mermaid":
            export_html_mermaid(operations, analysis_data, choices, df.columns.tolist(), output_base)
        elif choices.output_format == "html_interactive":
            export_interactive_html(operations, analysis_data, choices, output_base)
        elif choices.output_format == "html_svg":
            export_svg_html(operations, analysis_data, choices, df.columns.tolist(), output_base)
        else:  # html_interactive
            export_interactive_html(operations, analysis_data, choices, output_base)

        # –í—ã–≤–æ–¥ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        analysis = analysis_data.analysis
        print(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {excel_path} (–ª–∏—Å—Ç: {sheet_name})")
        print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {analysis.operations_count} –æ–ø–µ—Ä–∞—Ü–∏–π")
        print(f"–ê–Ω–∞–ª–∏–∑: {len(analysis.merge_points)} —É–∑–ª–æ–≤ —Å–ª–∏—è–Ω–∏—è, {len(analysis.split_points)} —É–∑–ª–æ–≤ —Ä–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏—è")
        print(f"–°—É–ø–µ—Ä-–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {len(analysis.critical_points)}")
        
        output_file = Path(f"{output_base}.{get_file_extension(choices.output_format)}")
        if output_file.exists():
            print(f"\nüìä –û–¢–ö–†–û–ô–¢–ï –§–ê–ô–õ –í –ë–†–ê–£–ó–ï–†–ï –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –î–ò–ê–ì–†–ê–ú–ú–´")
            print(f"–§–∞–π–ª: {output_file}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            try:
                webbrowser.open(f'file://{output_file.absolute()}')
                print("–î–∏–∞–≥—Ä–∞–º–º–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {e}")
        
        return True
        
    except Exception as e:
        log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
        return False

def get_file_extension(output_format: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –≤—ã–≤–æ–¥–∞"""
    extensions = {
        "md": "md",
        "html_mermaid": "html", 
        "html_interactive": "html",
        "html_svg": "html"
    }
    return extensions.get(output_format, "html")

def main() -> None:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –≤—Å–µ–≥–¥–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç GUI
    """
    from gui_interface import run_gui
    run_gui()

if __name__ == "__main__":
    main()