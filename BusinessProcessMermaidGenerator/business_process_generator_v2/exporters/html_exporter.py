"""
–≠–∫—Å–ø–æ—Ä—Ç –≤ HTML —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –ø–æ–ª–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
"""
import json
from pathlib import Path
from typing import Dict, List
from models import Operation, Choices, AnalysisData
from exporters.mermaid_exporter import build_mermaid_html
from utils import safe_id, escape_text, clean_text
from config import ENCODING

def create_enhanced_html_table(headers: List[str], data: List[Dict[str, str]], table_id: str = "") -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é HTML —Ç–∞–±–ª–∏—Ü—É —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
    """
    if not data:
        return "<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>"
    
    html = [f'<table class="sortable-table" id="{table_id}">']
    html.append('<thead><tr>')
    for header in headers:
        html.append(f'<th data-sort="{header}">{header} <span class="sort-icon">‚Üï</span></th>')
    html.append('</tr></thead>')
    html.append('<tbody>')
    for row in data:
        html.append('<tr>')
        for header in headers:
            value = str(row.get(header, ""))
            value = value.replace('\n', '<br>')
            html.append(f'<td>{value}</td>')
        html.append('</tr>')
    html.append('</tbody></table>')
    return '\n'.join(html)

def create_statistics_cards(analysis_data: AnalysisData, operations: Dict[str, Operation]) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    analysis = analysis_data.analysis
    
    # –†–∞—Å—á–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    complexity_score = calculate_complexity_score(operations, analysis_data)
    
    cards = [
        {
            'value': analysis.operations_count,
            'label': '–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π',
            'icon': 'üìä',
            'class': 'stat-primary'
        },
        {
            'value': len(analysis.critical_points),
            'label': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ—á–µ–∫',
            'icon': '‚ö†Ô∏è',
            'class': 'stat-warning'
        },
        {
            'value': len(analysis.merge_points),
            'label': '–¢–æ—á–µ–∫ —Å–ª–∏—è–Ω–∏—è',
            'icon': 'üîó',
            'class': 'stat-info'
        },
        {
            'value': len(analysis.split_points),
            'label': '–¢–æ—á–µ–∫ —Ä–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏—è',
            'icon': 'üîÄ',
            'class': 'stat-info'
        },
        {
            'value': len(analysis.external_inputs),
            'label': '–í–Ω–µ—à–Ω–∏—Ö –≤—Ö–æ–¥–æ–≤',
            'icon': 'üì•',
            'class': 'stat-success'
        },
        {
            'value': len(analysis.final_outputs),
            'label': '–ö–æ–Ω–µ—á–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤',
            'icon': 'üì§',
            'class': 'stat-success'
        },
        {
            'value': f"{complexity_score}/10",
            'label': '–°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞',
            'icon': 'üéØ',
            'class': 'stat-complexity'
        }
    ]
    
    html = ['<div class="stats-grid">']
    for card in cards:
        html.append(f'''
            <div class="stat-card {card['class']}">
                <div class="stat-icon">{card['icon']}</div>
                <div class="stat-value">{card['value']}</div>
                <div class="stat-label">{card['label']}</div>
            </div>
        ''')
    html.append('</div>')
    return '\n'.join(html)

def calculate_complexity_score(operations: Dict[str, Operation], analysis_data: AnalysisData) -> int:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ—Ü–µ–Ω–∫—É —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç 1 –¥–æ 10"""
    analysis = analysis_data.analysis
    
    # –í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    weights = {
        'operations': 0.3,
        'merge_points': 0.2,
        'split_points': 0.2,
        'critical_points': 0.3
    }
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ–∂–∏–¥–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
    max_operations = 50
    max_merge = 10
    max_split = 10
    max_critical = 5
    
    # –†–∞—Å—á–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    op_score = min(len(operations) / max_operations, 1.0)
    merge_score = min(len(analysis.merge_points) / max_merge, 1.0)
    split_score = min(len(analysis.split_points) / max_split, 1.0)
    critical_score = min(len(analysis.critical_points) / max_critical, 1.0)
    
    # –û–±—â–∏–π —Å—á–µ—Ç
    total_score = (
        op_score * weights['operations'] +
        merge_score * weights['merge_points'] +
        split_score * weights['split_points'] +
        critical_score * weights['critical_points']
    )
    
    return min(10, int(total_score * 10) + 1)

def create_analysis_accordion(analysis_data: AnalysisData) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∞–∫–∫–æ—Ä–¥–µ–æ–Ω –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    """
    analysis = analysis_data.analysis
    
    html = ['<div class="analysis-accordion">']
    
    # –°—É–ø–µ—Ä-–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    html.append('''
        <div class="accordion-item">
            <div class="accordion-header">
                <h3>‚ö†Ô∏è –°—É–ø–µ—Ä-–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</h3>
                <span class="accordion-badge">{count}</span>
                <span class="accordion-toggle">‚ñº</span>
            </div>
            <div class="accordion-content">
    '''.format(count=len(analysis.critical_points)))
    
    if analysis.critical_points:
        html.append('<div class="critical-list">')
        for cp in sorted(analysis.critical_points, key=lambda x: (x.inputs_count, x.output_reuse), reverse=True):
            html.append(f'''
                <div class="critical-item">
                    <strong>{cp.operation}</strong>
                    <div class="critical-stats">
                        <span class="stat-badge">{cp.inputs_count} –≤—Ö–æ–¥–æ–≤</span>
                        <span class="stat-badge">{cp.output_reuse} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –≤—ã—Ö–æ–¥–∞</span>
                    </div>
                </div>
            ''')
        html.append('</div>')
    else:
        html.append('<p class="no-data">–°—É–ø–µ—Ä-–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</p>')
    html.append('</div></div>')
    
    # –¢–æ—á–∫–∏ —Å–ª–∏—è–Ω–∏—è
    html.append('''
        <div class="accordion-item">
            <div class="accordion-header">
                <h3>üîó –¢–æ—á–∫–∏ —Å–ª–∏—è–Ω–∏—è</h3>
                <span class="accordion-badge">{count}</span>
                <span class="accordion-toggle">‚ñº</span>
            </div>
            <div class="accordion-content">
    '''.format(count=len(analysis.merge_points)))
    
    if analysis.merge_points:
        html.append('<div class="merge-list">')
        for mp in sorted(analysis.merge_points, key=lambda x: x.input_count, reverse=True):
            html.append(f'''
                <div class="merge-item">
                    <strong>{mp.operation}</strong>
                    <span class="merge-count">{mp.input_count} –≤—Ö–æ–¥–æ–≤</span>
                </div>
            ''')
        html.append('</div>')
    else:
        html.append('<p class="no-data">–¢–æ—á–µ–∫ —Å–ª–∏—è–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</p>')
    html.append('</div></div>')
    
    # –¢–æ—á–∫–∏ —Ä–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏—è
    html.append('''
        <div class="accordion-item">
            <div class="accordion-header">
                <h3>üîÄ –¢–æ—á–∫–∏ —Ä–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏—è</h3>
                <span class="accordion-badge">{count}</span>
                <span class="accordion-toggle">‚ñº</span>
            </div>
            <div class="accordion-content">
    '''.format(count=len(analysis.split_points)))
    
    if analysis.split_points:
        html.append('<div class="split-list">')
        for sp in sorted(analysis.split_points, key=lambda x: x.target_count, reverse=True):
            html.append(f'''
                <div class="split-item">
                    <strong>{sp.output}</strong>
                    <div class="split-details">
                        <span>–∏–∑ {sp.source_operation}</span>
                        <span class="split-count">‚Üí {sp.target_count} –æ–ø–µ—Ä–∞—Ü–∏–π</span>
                    </div>
                </div>
            ''')
        html.append('</div>')
    else:
        html.append('<p class="no-data">–¢–æ—á–µ–∫ —Ä–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ</p>')
    html.append('</div></div>')
    
    html.append('</div>')  # –∑–∞–∫—Ä—ã–≤–∞–µ–º analysis-accordion
    return '\n'.join(html)

def generate_enhanced_html_report(mermaid_code: str, analysis_data: AnalysisData, operations: Dict[str, Operation], 
                                 choices: Choices, available_columns: List[str], output_file: Path) -> None:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π HTML –æ—Ç—á–µ—Ç —Å –ø–æ–ª–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    """
    analysis = analysis_data.analysis
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü
    from collections import defaultdict
    input_to_operations = defaultdict(list)
    for op in operations.values():
        for inp in op.inputs:
            if inp:
                input_to_operations[inp].append(op.name)
    
    # –†–µ–µ—Å—Ç—Ä –æ–ø–µ—Ä–∞—Ü–∏–π
    op_rows = []
    critical_ops = {c.operation for c in analysis.critical_points}
    
    for name, op in operations.items():
        is_merge = len(op.inputs) > 1
        is_split = any(len(input_to_operations.get(out, [])) > 1 for out in op.outputs)
        node_type = (
            "–°—É–ø–µ—Ä-–∫—Ä–∏—Ç–∏—á–Ω–∞—è" if name in critical_ops else
            "–°–ª–∏—è–Ω–∏–µ+–†–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏–µ" if is_merge and is_split else
            "–°–ª–∏—è–Ω–∏–µ" if is_merge else
            "–†–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏–µ" if is_split else
            "–û–±—ã—á–Ω—ã–π"
        )
        
        row_data = {
            "–û–ø–µ—Ä–∞—Ü–∏—è": name,
            "–í—Ö–æ–¥—ã": ", ".join(op.inputs) if op.inputs else "-",
            "–í—ã—Ö–æ–¥—ã": ", ".join(op.outputs) if op.outputs else "-",
            "–¢–∏–ø —É–∑–ª–∞": node_type,
        }
        
        if '–ì—Ä—É–ø–ø–∞' in available_columns:
            row_data["–ì—Ä—É–ø–ø–∞"] = op.group
        if '–í–ª–∞–¥–µ–ª–µ—Ü' in available_columns:
            row_data["–í–ª–∞–¥–µ–ª–µ—Ü"] = op.owner
        if '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏' in available_columns:
            row_data["–û–ø–∏—Å–∞–Ω–∏–µ"] = op.detailed
            
        op_rows.append(row_data)
    
    # –†–µ–µ—Å—Ç—Ä –≤—Ö–æ–¥–æ–≤/–≤—ã—Ö–æ–¥–æ–≤
    io_rows = []
    items = analysis.external_inputs | analysis.final_outputs | set(analysis_data.output_to_operation) | set(input_to_operations)
    for item in sorted(items):
        if not item:
            continue
        src = "–í–ù–ï–®–ù–ò–ô –í–•–û–î" if item in analysis.external_inputs else analysis_data.output_to_operation.get(item, "-")
        tgts = input_to_operations.get(item, [])
        if item in analysis.final_outputs and not tgts:
            tgts = ["–ö–û–ù–ï–ß–ù–´–ô –í–´–•–û–î"]
        io_rows.append({
            "–≠–ª–µ–º–µ–Ω—Ç": item,
            "–ò—Å—Ç–æ—á–Ω–∏–∫": src,
            "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏": ", ".join(tgts) if tgts else "-",
        })
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    available_cols = {
        'group': '–ì—Ä—É–ø–ø–∞' in available_columns,
        'owner': '–í–ª–∞–¥–µ–ª–µ—Ü' in available_columns,
        'detailed_desc': '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏' in available_columns
    }

    html_content = f'''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–î–∏–∞–≥—Ä–∞–º–º–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞ - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑</title>
    <script src="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js"></script>
    <style>
        :root {{
            --primary-color: #007cba;
            --warning-color: #ff6b35;
            --success-color: #28a745;
            --info-color: #17a2b8;
            --complexity-color: #6f42c1;
            --text-color: #333;
            --border-color: #ddd;
            --bg-light: #f8f9fa;
        }}
        
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: var(--text-color);
            background: #fff;
        }}
        
        .container {{
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }}
        
        /* –ù–∞–≤–∏–≥–∞—Ü–∏—è */
        .report-nav {{
            background: white;
            padding: 15px 20px;
            border-bottom: 3px solid var(--primary-color);
            position: sticky;
            top: 0;
            z-index: 1000;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
        }}
        
        .nav-link {{
            padding: 8px 16px;
            text-decoration: none;
            color: var(--text-color);
            border-radius: 5px;
            transition: all 0.3s ease;
            font-weight: 500;
        }}
        
        .nav-link:hover {{
            background: var(--primary-color);
            color: white;
        }}
        
        /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
        .section {{
            margin: 30px 0;
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.05);
        }}
        
        .section h2 {{
            color: var(--primary-color);
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid var(--border-color);
        }}
        
        /* –ö–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */
        .stats-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }}
        
        .stat-card {{
            background: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            border-left: 4px solid var(--primary-color);
        }}
        
        .stat-card.stat-warning {{ border-left-color: var(--warning-color); }}
        .stat-card.stat-success {{ border-left-color: var(--success-color); }}
        .stat-card.stat-info {{ border-left-color: var(--info-color); }}
        .stat-card.stat-complexity {{ border-left-color: var(--complexity-color); }}
        
        .stat-icon {{
            font-size: 2em;
            margin-bottom: 10px;
        }}
        
        .stat-value {{
            font-size: 2em;
            font-weight: bold;
            margin: 10px 0;
        }}
        
        .stat-label {{
            color: #666;
            font-size: 0.9em;
        }}
        
        /* –ê–∫–∫–æ—Ä–¥–µ–æ–Ω –∞–Ω–∞–ª–∏–∑–∞ */
        .analysis-accordion {{
            margin: 20px 0;
        }}
        
        .accordion-item {{
            border: 1px solid var(--border-color);
            border-radius: 5px;
            margin-bottom: 10px;
            overflow: hidden;
        }}
        
        .accordion-header {{
            background: var(--bg-light);
            padding: 15px 20px;
            cursor: pointer;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: background 0.3s ease;
        }}
        
        .accordion-header:hover {{
            background: #e9ecef;
        }}
        
        .accordion-header h3 {{
            margin: 0;
            font-size: 1.1em;
        }}
        
        .accordion-badge {{
            background: var(--primary-color);
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.8em;
        }}
        
        .accordion-toggle {{
            transition: transform 0.3s ease;
        }}
        
        .accordion-item.active .accordion-toggle {{
            transform: rotate(180deg);
        }}
        
        .accordion-content {{
            padding: 0;
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease, padding 0.3s ease;
        }}
        
        .accordion-item.active .accordion-content {{
            padding: 20px;
            max-height: 1000px;
        }}
        
        /* –°–ø–∏—Å–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ */
        .critical-list, .merge-list, .split-list {{
            display: grid;
            gap: 10px;
        }}
        
        .critical-item, .merge-item, .split-item {{
            padding: 15px;
            background: var(--bg-light);
            border-radius: 5px;
            border-left: 4px solid var(--warning-color);
        }}
        
        .merge-item {{ border-left-color: var(--info-color); }}
        .split-item {{ border-left-color: var(--info-color); }}
        
        .critical-stats {{
            margin-top: 8px;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }}
        
        .stat-badge {{
            background: var(--warning-color);
            color: white;
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 0.8em;
        }}
        
        .merge-count, .split-count {{
            background: var(--info-color);
            color: white;
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 0.8em;
            margin-left: 10px;
        }}
        
        .split-details {{
            margin-top: 5px;
            color: #666;
            font-size: 0.9em;
        }}
        
        .no-data {{
            text-align: center;
            color: #666;
            font-style: italic;
            padding: 20px;
        }}
        
        /* –î–∏–∞–≥—Ä–∞–º–º–∞ */
        .diagram-section {{
            margin: 30px 0;
        }}
        
        .diagram-container {{
            border: 1px solid var(--border-color);
            border-radius: 8px;
            padding: 20px;
            background: white;
            position: relative;
            overflow: auto;
            min-height: 400px;
        }}
        
        .mermaid-controls {{
            position: absolute;
            top: 10px;
            right: 10px;
            z-index: 100;
            display: flex;
            gap: 5px;
            background: white;
            padding: 5px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }}
        
        .mermaid-controls button {{
            padding: 5px 10px;
            border: 1px solid var(--border-color);
            background: white;
            border-radius: 3px;
            cursor: pointer;
        }}
        
        .mermaid-controls button:hover {{
            background: var(--bg-light);
        }}
        
        /* –¢–∞–±–ª–∏—Ü—ã */
        .table-section {{
            margin: 20px 0;
        }}
        
        .sortable-table {{
            width: 100%;
            border-collapse: collapse;
            margin: 10px 0;
        }}
        
        .sortable-table th {{
            background: var(--primary-color);
            color: white;
            padding: 12px;
            text-align: left;
            cursor: pointer;
            position: relative;
        }}
        
        .sortable-table th:hover {{
            background: #005a87;
        }}
        
        .sort-icon {{
            margin-left: 5px;
            font-size: 0.8em;
        }}
        
        .sortable-table td {{
            padding: 10px 12px;
            border-bottom: 1px solid var(--border-color);
        }}
        
        .sortable-table tr:hover {{
            background: var(--bg-light);
        }}
        
        /* –õ–µ–≥–µ–Ω–¥–∞ */
        .legend-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }}
        
        .legend-item {{
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 8px;
            background: var(--bg-light);
            border-radius: 5px;
        }}
        
        .legend-color {{
            width: 20px;
            height: 20px;
            border-radius: 3px;
            border: 1px solid #ccc;
        }}
        
        /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
        @media (max-width: 768px) {{
            .stats-grid {{
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            }}
            
            .report-nav {{
                flex-direction: column;
                gap: 10px;
            }}
            
            .nav-link {{
                text-align: center;
            }}
            
            .mermaid-controls {{
                position: relative;
                top: 0;
                right: 0;
                justify-content: center;
                margin-bottom: 10px;
            }}
        }}
    </style>
</head>
<body>
    <nav class="report-nav">
        <a href="#overview" class="nav-link">üìä –û–±–∑–æ—Ä</a>
        <a href="#diagram" class="nav-link">üîç –î–∏–∞–≥—Ä–∞–º–º–∞</a>
        <a href="#analysis" class="nav-link">üìà –ê–Ω–∞–ª–∏–∑</a>
        <a href="#registry" class="nav-link">üìã –†–µ–µ—Å—Ç—Ä—ã</a>
        <a href="#statistics" class="nav-link">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
        <a href="#legend" class="nav-link">üé® –õ–µ–≥–µ–Ω–¥–∞</a>
    </nav>

    <div class="container">
        <!-- –°–µ–∫—Ü–∏—è –æ–±–∑–æ—Ä–∞ -->
        <section id="overview" class="section">
            <h2>üìä –û–±–∑–æ—Ä –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞</h2>
            {create_statistics_cards(analysis_data, operations)}
        </section>

        <!-- –°–µ–∫—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã -->
        <section id="diagram" class="section">
            <h2>üîç –í–∏–∑—É–∞–ª—å–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞</h2>
            <div class="diagram-container">
                <div class="mermaid-controls">
                    <button id="zoomInBtn">üîç +</button>
                    <button id="zoomOutBtn">üîç -</button>
                    <button id="resetZoomBtn">üóò –°–±—Ä–æ—Å</button>
                    <button id="fitToScreenBtn">üìê –í–º–µ—Å—Ç–∏—Ç—å</button>
                </div>
                <div class="mermaid" id="mermaid-diagram">
{mermaid_code}
                </div>
            </div>
        </section>

        <!-- –°–µ–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ -->
        <section id="analysis" class="section">
            <h2>üìà –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ—á–µ–∫</h2>
            {create_analysis_accordion(analysis_data)}
        </section>

        <!-- –°–µ–∫—Ü–∏—è —Ä–µ–µ—Å—Ç—Ä–æ–≤ -->
        <section id="registry" class="section">
            <h2>üìã –†–µ–µ—Å—Ç—Ä—ã –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Å–≤—è–∑–µ–π</h2>
            
            <div class="table-section">
                <h3>–û–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞</h3>
                {create_enhanced_html_table(
                    ["–û–ø–µ—Ä–∞—Ü–∏—è"] + 
                    (["–ì—Ä—É–ø–ø–∞"] if available_cols['group'] else []) +
                    (["–í–ª–∞–¥–µ–ª–µ—Ü"] if available_cols['owner'] else []) +
                    ["–í—Ö–æ–¥—ã", "–í—ã—Ö–æ–¥—ã", "–¢–∏–ø —É–∑–ª–∞"] +
                    (["–û–ø–∏—Å–∞–Ω–∏–µ"] if available_cols['detailed_desc'] else []),
                    op_rows, "operations-table"
                )}
            </div>

            <div class="table-section">
                <h3>–í—Ö–æ–¥—ã –∏ –≤—ã—Ö–æ–¥—ã —Å–∏—Å—Ç–µ–º—ã</h3>
                {create_enhanced_html_table(
                    ["–≠–ª–µ–º–µ–Ω—Ç", "–ò—Å—Ç–æ—á–Ω–∏–∫", "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–∏"],
                    io_rows, "io-table"
                )}
            </div>
        </section>

        <!-- –°–µ–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ -->
        <section id="statistics" class="section">
            <h2>üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
            <div class="stats-details">
                <div class="stat-item">
                    <strong>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</strong>
                    <ul>
                        <li>–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {analysis.operations_count}</li>
                        <li>–í–Ω–µ—à–Ω–∏–µ –≤—Ö–æ–¥—ã: {len(analysis.external_inputs)}</li>
                        <li>–ö–æ–Ω–µ—á–Ω—ã–µ –≤—ã—Ö–æ–¥—ã: {len(analysis.final_outputs)}</li>
                    </ul>
                </div>
                <div class="stat-item">
                    <strong>–ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:</strong>
                    <ul>
                        <li>–û–ø–µ—Ä–∞—Ü–∏–π —Å–ª–∏—è–Ω–∏—è: {len(analysis.merge_points)}</li>
                        <li>–û–ø–µ—Ä–∞—Ü–∏–π —Ä–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏—è: {len(analysis.split_points)}</li>
                        <li>–°—É–ø–µ—Ä-–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {len(analysis.critical_points)}</li>
                    </ul>
                </div>
            </div>
        </section>

        <!-- –°–µ–∫—Ü–∏—è –ª–µ–≥–µ–Ω–¥—ã -->
        <section id="legend" class="section">
            <h2>üé® –õ–µ–≥–µ–Ω–¥–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã</h2>
            <div class="legend-grid">
                <div class="legend-item">
                    <div class="legend-color" style="background: yellow;"></div>
                    <span>–ñ–µ–ª—Ç—ã–µ –æ–≤–∞–ª—ã - –≤–Ω–µ—à–Ω–∏–µ –≤—Ö–æ–¥—ã</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: red;"></div>
                    <span>–ö—Ä–∞—Å–Ω—ã–µ –æ–≤–∞–ª—ã - –∫–æ–Ω–µ—á–Ω—ã–µ –≤—ã—Ö–æ–¥—ã</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: orange;"></div>
                    <span>–û—Ä–∞–Ω–∂–µ–≤—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ - –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–ª–∏—è–Ω–∏—è</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: purple;"></div>
                    <span>–§–∏–æ–ª–µ—Ç–æ–≤—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ - –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏—è</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: #ff4444;"></div>
                    <span>–ü—É–ª—å—Å–∏—Ä—É—é—â–∏–µ –∫—Ä–∞—Å–Ω—ã–µ - —Å—É–ø–µ—Ä-–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background: #007cba;"></div>
                    <span>–°–∏–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</span>
                </div>
            </div>
        </section>
    </div>

    <script>
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º–æ–π
        let diagramScale = 1.0;
        let mermaidElement = null;
        let diagramContainer = null;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', function() {{
            console.log('DOM loaded, initializing...');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Mermaid
            mermaid.initialize({{ 
                startOnLoad: true,
                theme: 'default',
                securityLevel: 'loose'
            }});
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å–µ–∫—Ü–∏—é –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–∞
            const firstAccordion = document.querySelector('.accordion-item');
            if (firstAccordion) {{
                firstAccordion.classList.add('active');
            }}
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º–æ–π
            initDiagramControls();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            initNavigation();
            initTableSorting();
        }});

        function initDiagramControls() {{
            console.log('Initializing diagram controls...');
            
            mermaidElement = document.getElementById('mermaid-diagram');
            diagramContainer = document.querySelector('.diagram-container');
            
            if (!mermaidElement) {{
                console.error('Mermaid diagram element not found');
                return;
            }}
            
            if (!diagramContainer) {{
                console.error('Diagram container not found');
                return;
            }}
            
            // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
            document.getElementById('zoomInBtn').addEventListener('click', zoomIn);
            document.getElementById('zoomOutBtn').addEventListener('click', zoomOut);
            document.getElementById('resetZoomBtn').addEventListener('click', resetZoom);
            document.getElementById('fitToScreenBtn').addEventListener('click', fitToScreen);
            
            console.log('Diagram controls initialized');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
            setTimeout(fitToScreen, 1000);
        }}

        function zoomIn() {{
            if (!mermaidElement) return;
            diagramScale = Math.min(3.0, diagramScale + 0.1);
            updateDiagramScale();
        }}
        
        function zoomOut() {{
            if (!mermaidElement) return;
            diagramScale = Math.max(0.3, diagramScale - 0.1);
            updateDiagramScale();
        }}
        
        function resetZoom() {{
            if (!mermaidElement) return;
            diagramScale = 1.0;
            updateDiagramScale();
            // –°–±—Ä–æ—Å —Å–∫—Ä–æ–ª–ª–∞ –∫ —Ü–µ–Ω—Ç—Ä—É
            setTimeout(() => {{
                if (diagramContainer) {{
                    diagramContainer.scrollLeft = (diagramContainer.scrollWidth - diagramContainer.clientWidth) / 2;
                    diagramContainer.scrollTop = (diagramContainer.scrollHeight - diagramContainer.clientHeight) / 2;
                }}
            }}, 100);
        }}
        
        function fitToScreen() {{
            if (!mermaidElement || !diagramContainer) return;
            
            const svg = mermaidElement.querySelector('svg');
            if (!svg) {{
                console.warn('SVG element not found in mermaid diagram');
                return;
            }}
            
            const containerWidth = diagramContainer.clientWidth - 40;
            const containerHeight = diagramContainer.clientHeight - 40;
            const svgWidth = svg.getBoundingClientRect().width;
            const svgHeight = svg.getBoundingClientRect().height;
            
            if (svgWidth === 0 || svgHeight === 0) {{
                console.warn('SVG dimensions are zero, retrying...');
                setTimeout(fitToScreen, 500);
                return;
            }}
            
            const scaleX = containerWidth / svgWidth;
            const scaleY = containerHeight / svgHeight;
            diagramScale = Math.min(scaleX, scaleY, 1.0);
            updateDiagramScale();
            
            // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ—Å–ª–µ –ø–æ–¥–≥–æ–Ω–∫–∏
            setTimeout(() => {{
                if (diagramContainer) {{
                    diagramContainer.scrollLeft = (diagramContainer.scrollWidth - diagramContainer.clientWidth) / 2;
                    diagramContainer.scrollTop = (diagramContainer.scrollHeight - diagramContainer.clientHeight) / 2;
                }}
            }}, 100);
        }}
        
        function updateDiagramScale() {{
            if (!mermaidElement) return;
            mermaidElement.style.transform = 'scale(' + diagramScale + ')';
            mermaidElement.style.transformOrigin = '0 0';
            console.log('Diagram scale updated to: ' + diagramScale);
        }}
        
        function initNavigation() {{
            // –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            document.querySelectorAll('.nav-link').forEach(link => {{
                link.addEventListener('click', (e) => {{
                    e.preventDefault();
                    const targetId = link.getAttribute('href').substring(1);
                    const targetSection = document.getElementById(targetId);
                    if (targetSection) {{
                        targetSection.scrollIntoView({{
                            behavior: 'smooth',
                            block: 'start'
                        }});
                    }}
                }});
            }});
            
            // –ê–∫–∫–æ—Ä–¥–µ–æ–Ω
            document.querySelectorAll('.accordion-header').forEach(header => {{
                header.addEventListener('click', () => {{
                    const item = header.parentElement;
                    item.classList.toggle('active');
                }});
            }});
        }}
        
        function initTableSorting() {{
            // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü
            document.querySelectorAll('.sortable-table th').forEach(header => {{
                header.addEventListener('click', () => {{
                    const table = header.closest('table');
                    const columnIndex = Array.from(header.parentElement.children).indexOf(header);
                    sortTable(table, columnIndex);
                }});
            }});
        }}
        
        function sortTable(table, columnIndex) {{
            const tbody = table.querySelector('tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–º–∏
            const isNumeric = rows.every(row => {{
                const cell = row.children[columnIndex];
                const text = cell.textContent.trim();
                return !isNaN(parseFloat(text)) && isFinite(text);
            }});
            
            rows.sort((a, b) => {{
                const aVal = a.children[columnIndex].textContent.trim();
                const bVal = b.children[columnIndex].textContent.trim();
                
                if (isNumeric) {{
                    return parseFloat(aVal) - parseFloat(bVal);
                }} else {{
                    return aVal.localeCompare(bVal, 'ru');
                }}
            }});
            
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            tbody.innerHTML = '';
            rows.forEach(row => tbody.appendChild(row));
        }}

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        document.addEventListener('keydown', (e) => {{
            if ((e.ctrlKey || e.metaKey) && !e.altKey) {{
                if (e.key === '=' || e.key === '+') {{
                    e.preventDefault();
                    zoomIn();
                }} else if (e.key === '-') {{
                    e.preventDefault();
                    zoomOut();
                }} else if (e.key === '0') {{
                    e.preventDefault();
                    resetZoom();
                }} else if (e.key === '1') {{
                    e.preventDefault();
                    fitToScreen();
                }}
            }}
        }});
    </script>
</body>
</html>'''

    output_file.write_text(html_content, encoding=ENCODING)

def export_html_mermaid(operations: Dict[str, Operation], analysis_data: AnalysisData, 
                       choices: Choices, available_columns: List[str], output_base: str = None) -> None:
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É –≤ —É–ª—É—á—à–µ–Ω–Ω—ã–π HTML —Å –ø–æ–ª–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    """
    if output_base is None:
        output_base = "business_process_diagram"
    
    output_file = Path(f"{output_base}.html")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Mermaid –∫–æ–¥–∞
    mermaid_code = build_mermaid_html(operations, analysis_data, choices)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ HTML –æ—Ç—á–µ—Ç–∞
    generate_enhanced_html_report(mermaid_code, analysis_data, operations, choices, available_columns, output_file)
    
    print(f"\n" + "="*60)
    print("‚úì –£–õ–£–ß–®–ï–ù–ù–´–ô HTML-–û–¢–ß–ï–¢ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù!")
    print("="*60)
    print(f"–§–∞–π–ª: {output_file}")
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {analysis_data.analysis.operations_count} –æ–ø–µ—Ä–∞—Ü–∏–π")
    print(f"–°–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞: {calculate_complexity_score(operations, analysis_data)}/10")