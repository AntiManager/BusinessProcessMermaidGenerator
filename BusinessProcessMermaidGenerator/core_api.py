"""
API —è–¥—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - –æ–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
"""
import logging
import webbrowser
from pathlib import Path
from typing import Dict, Optional, Tuple, List
from core_engine import BusinessProcessEngine
from models import Choices

log = logging.getLogger(__name__)

class DiagramGenerator:
    """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º - –∑–∞–º–µ–Ω—è–µ—Ç God Object –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ main.py"""
    
    def __init__(self):
        self.engine = BusinessProcessEngine()
    
    def generate_diagram(self, excel_path: Path, sheet_name: str, choices: Choices, 
                        output_base: str, available_columns: list = None) -> Tuple[bool, str, List[Path]]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–ø–∏—Å–æ–∫_—Å–æ–∑–¥–∞–Ω–Ω—ã—Ö_—Ñ–∞–π–ª–æ–≤)
        """
        try:
            log.info(f"–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {excel_path}, –ª–∏—Å—Ç: {sheet_name}")
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            validation_error = self._validate_inputs(excel_path, sheet_name, output_base, choices)
            if validation_error:
                return False, validation_error, []
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–∞
            is_cld = choices.output_format in ["cld_mermaid", "cld_interactive"]
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if is_cld and choices.cld_source_type == "auto":
                # –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ CLD –Ω—É–∂–Ω—ã –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã
                if not self.engine.load_business_processes(excel_path, sheet_name, choices):
                    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ CLD", []
            elif not is_cld:
                # –û–±—ã—á–Ω—ã–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã
                if not self.engine.load_business_processes(excel_path, sheet_name, choices):
                    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã", []
            
            # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
            if is_cld:
                if not self.engine.load_causal_analysis(excel_path, choices):
                    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω–Ω–æ-—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–≤—è–∑–∏", []
            else:
                if not self.engine.analyze_business_processes(choices):
                    return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã", []
            
            # –≠–∫—Å–ø–æ—Ä—Ç –¥–∏–∞–≥—Ä–∞–º–º—ã
            output_files = self.engine.export_diagram(choices, output_base, available_columns)
            if not output_files:
                return False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –¥–∏–∞–≥—Ä–∞–º–º—ã", []
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
            valid_files = [f for f in output_files if f is not None and isinstance(f, Path)]
            
            if not valid_files:
                return False, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã", []
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            stats = self.engine.get_statistics()
            success_message = self._build_success_message(valid_files, stats, is_cld)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –û–°–ù–û–í–ù–û–ì–û —Ñ–∞–π–ª–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            main_file = self._get_main_file_to_open(valid_files, choices)
            if main_file:
                self._open_in_browser(main_file)
            
            return True, success_message, valid_files
            
        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {str(e)}"
            log.error(error_msg, exc_info=True)
            return False, error_msg, []
    
    def _validate_inputs(self, excel_path: Path, sheet_name: str, output_base: str, choices: Choices) -> Optional[str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        if not excel_path or not excel_path.exists():
            return f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {excel_path}"
        
        if not sheet_name:
            return "–ù–µ –≤—ã–±—Ä–∞–Ω –ª–∏—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ Excel"
        
        if not output_base or not output_base.strip():
            return "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è CLD —Ñ–æ—Ä–º–∞—Ç–æ–≤
        if choices.output_format in ["cld_mermaid", "cld_interactive"]:
            if choices.cld_source_type == "manual" and not choices.cld_sheet_name:
                return ("–î–ª—è —Ä—É—á–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ CLD –¥–∞–Ω–Ω—ã—Ö –≤—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç —Å CLD –¥–∞–Ω–Ω—ã–º–∏.\n\n"
                       "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ CLD –∏–∑ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤, "
                       "–∏–∑–º–µ–Ω–∏—Ç–µ '–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö' –Ω–∞ '–ê–≤—Ç–æ –∏–∑ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤'.")
        
        return None
    
    def _get_main_file_to_open(self, output_files: List[Path], choices: Choices) -> Optional[Path]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–æ–π —Ñ–∞–π–ª –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        if not output_files:
            return None
        
        # –î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª
        if choices.output_format in ["html_interactive", "cld_interactive"]:
            return output_files[0]
        
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª (–±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ _vis, _cld)
        main_files = [f for f in output_files if f.stem and not f.stem.endswith(('_vis', '_cld'))]
        
        if main_files:
            return main_files[0]
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
        return output_files[0]
    
    def _build_success_message(self, output_files: List[Path], stats: Dict, is_cld: bool) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ"""
        if not output_files:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª—ã –¥–∏–∞–≥—Ä–∞–º–º—ã"
        
        main_file = next((f for f in output_files if f.stem and not f.stem.endswith(('_vis', '_cld'))), output_files[0])
        interactive_files = [f for f in output_files if f.stem and f.stem.endswith(('_vis', '_cld'))]
        
        if is_cld:
            message = (f"‚úÖ CAUSAL LOOP DIAGRAM –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù!\n\n"
                      f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                      f"   ‚Ä¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {stats.get('cld_variables', 0)}\n"
                      f"   ‚Ä¢ –°–≤—è–∑–µ–π: {stats.get('cld_links', 0)}\n"
                      f"   ‚Ä¢ –ü–µ—Ç–µ–ª—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {stats.get('cld_loops', 0)}\n\n"
                      f"üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n"
                      f"   ‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π: {main_file.name}\n")
            
            if interactive_files:
                message += f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π: {interactive_files[0].name}\n"
            
            message += f"\n–û—Å–Ω–æ–≤–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ."
            
        else:
            message = (f"‚úÖ –î–ò–ê–ì–†–ê–ú–ú–ê –ë–ò–ó–ù–ï–°-–ü–†–û–¶–ï–°–°–û–í –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–ê!\n\n"
                      f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                      f"   ‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏–π: {stats.get('operations_count', 0)}\n"
                      f"   ‚Ä¢ –í–Ω–µ—à–Ω–∏—Ö –≤—Ö–æ–¥–æ–≤: {stats.get('external_inputs', 0)}\n"
                      f"   ‚Ä¢ –ö–æ–Ω–µ—á–Ω—ã—Ö –≤—ã—Ö–æ–¥–æ–≤: {stats.get('final_outputs', 0)}\n"
                      f"   ‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {stats.get('critical_points', 0)}\n\n"
                      f"üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:\n"
                      f"   ‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π: {main_file.name}\n")
            
            if interactive_files:
                message += f"   ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π: {interactive_files[0].name}\n"
            
            message += f"\n–û—Å–Ω–æ–≤–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ."
        
        return message
    
    def _open_in_browser(self, output_file: Path):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        try:
            if output_file and output_file.exists():
                webbrowser.open(f'file://{output_file.absolute()}')
                log.info(f"–î–∏–∞–≥—Ä–∞–º–º–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {output_file}")
            else:
                log.warning(f"–§–∞–π–ª –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {output_file}")
        except Exception as e:
            log.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ: {e}")

def run_with_gui(excel_path: Path, sheet_name: str, choices: Choices, output_base: str) -> bool:
    """
    –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ GUI
    –¢–µ–ø–µ—Ä—å –±–µ–∑ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤!
    """
    generator = DiagramGenerator()
    success, message, output_files = generator.generate_diagram(excel_path, sheet_name, choices, output_base)
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –≤ GUI
    log.info(message)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
    if success and output_files:
        log.info(f"–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(output_files)}")
        for file in output_files:
            if file and isinstance(file, Path):
                log.info(f"  - {file.name}")
    
    return success

def get_file_extension(output_format: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É –≤—ã–≤–æ–¥–∞"""
    extensions = {
        "md": "md",
        "html_mermaid": "html", 
        "html_interactive": "html",
        "cld_mermaid": "md",
        "cld_interactive": "html"
    }
    return extensions.get(output_format, "html")