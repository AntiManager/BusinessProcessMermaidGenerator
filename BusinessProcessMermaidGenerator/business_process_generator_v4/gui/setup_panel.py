"""
–ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º
"""
from PyQt6.QtWidgets import (QWidget, QVBoxLayout, QGroupBox, QFormLayout, 
                             QLineEdit, QPushButton, QComboBox, QCheckBox,
                             QSpinBox, QRadioButton, QButtonGroup, QFileDialog,
                             QHBoxLayout, QLabel)
from PyQt6.QtCore import pyqtSignal, QThread
from pathlib import Path
import pandas as pd
from core.data_loader import load_and_validate_data, collect_operations
from core.analysis import analyse_network
from core.models import Choices
from exporters.mermaid_exporter import generate_mermaid_full_markdown

class GenerationThread(QThread):
    finished = pyqtSignal(str, str)  # file_path, content
    
    def __init__(self, excel_path, sheet_name, choices):
        super().__init__()
        self.excel_path = excel_path
        self.sheet_name = sheet_name
        self.choices = choices
    
    def run(self):
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            df, error = load_and_validate_data(self.excel_path, self.sheet_name, {"–û–ø–µ—Ä–∞—Ü–∏—è", "–í—Ö–æ–¥—ã", "–í—ã—Ö–æ–¥"})
            if error:
                print(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {error}")
                return
                
            operations = collect_operations(df, self.choices)
            analysis_data = analyse_network(operations, self.choices)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Markdown –∫–æ–Ω—Ç–µ–Ω—Ç
            content = generate_mermaid_full_markdown(
                operations, analysis_data, self.choices, df.columns.tolist()
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            output_path = Path("temp_diagram.md")
            output_path.write_text(content, encoding='utf-8')
            
            self.finished.emit(str(output_path), content)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

class SetupPanel(QWidget):
    generation_complete = pyqtSignal(str, str)
    settings_changed = pyqtSignal(dict)
    
    def __init__(self):
        super().__init__()
        self.excel_path = ""
        self.sheet_names = []
        self.init_ui()
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        
        # –ì—Ä—É–ø–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        source_group = QGroupBox("üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö")
        source_layout = QFormLayout(source_group)
        
        self.file_path_edit = QLineEdit()
        self.file_path_edit.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel...")
        browse_btn = QPushButton("–û–±–∑–æ—Ä...")
        browse_btn.clicked.connect(self.browse_file)
        
        file_layout = QHBoxLayout()
        file_layout.addWidget(self.file_path_edit)
        file_layout.addWidget(browse_btn)
        
        source_layout.addRow("–§–∞–π–ª Excel:", file_layout)
        
        self.sheet_combo = QComboBox()
        self.sheet_combo.currentTextChanged.connect(self.on_sheet_changed)
        source_layout.addRow("–õ–∏—Å—Ç:", self.sheet_combo)
        
        # –ì—Ä—É–ø–ø–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params_group = QGroupBox("‚ö° –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        params_layout = QFormLayout(params_group)
        
        # –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
        self.format_group = QButtonGroup()
        format_layout = QHBoxLayout()
        
        formats = [
            ("Mermaid", "md", True),
            ("HTML", "html", False),
            ("SVG", "svg", False)
        ]
        
        for text, value, checked in formats:
            rb = QRadioButton(text)
            rb.setProperty('format', value)
            rb.setChecked(checked)
            self.format_group.addButton(rb)
            format_layout.addWidget(rb)
        
        params_layout.addRow("–§–æ—Ä–º–∞—Ç:", format_layout)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
        self.grouping_cb = QCheckBox("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ø–æ–¥–≥—Ä—É–ø–ø–∞–º")
        params_layout.addRow("", self.grouping_cb)
        
        self.detailed_cb = QCheckBox("–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
        params_layout.addRow("", self.detailed_cb)
        
        # –ü–æ—Ä–æ–≥–∏
        thresholds_layout = QHBoxLayout()
        self.min_inputs = QSpinBox()
        self.min_inputs.setRange(1, 10)
        self.min_inputs.setValue(3)
        thresholds_layout.addWidget(self.min_inputs)
        thresholds_layout.addWidget(QLabel("–º–∏–Ω. –≤—Ö–æ–¥–æ–≤"))
        
        self.min_reuse = QSpinBox()
        self.min_reuse.setRange(1, 10)
        self.min_reuse.setValue(3)
        thresholds_layout.addWidget(self.min_reuse)
        thresholds_layout.addWidget(QLabel("–º–∏–Ω. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"))
        
        params_layout.addRow("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ—á–∫–∏:", thresholds_layout)
        
        # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.generate_btn = QPushButton("üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É")
        self.generate_btn.clicked.connect(self.generate_diagram)
        self.generate_btn.setEnabled(False)
        
        layout.addWidget(source_group)
        layout.addWidget(params_group)
        layout.addWidget(self.generate_btn)
        layout.addStretch()
    
    def browse_file(self):
        file_path, _ = QFileDialog.getOpenFileName(
            self, "–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª", "", "Excel Files (*.xlsx *.xls)"
        )
        if file_path:
            self.excel_path = file_path
            self.file_path_edit.setText(file_path)
            self.load_sheets()
            self.generate_btn.setEnabled(True)
    
    def load_sheets(self):
        try:
            excel_file = pd.ExcelFile(self.excel_path, engine="openpyxl")
            self.sheet_names = excel_file.sheet_names
            self.sheet_combo.clear()
            self.sheet_combo.addItems(self.sheet_names)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—Å—Ç–æ–≤: {e}")
    
    def on_sheet_changed(self, sheet_name):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞"""
        pass
    
    def generate_diagram(self):
        if not self.excel_path or not self.sheet_combo.currentText():
            return
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Choices
        choices = Choices(
            subgroup_column="–ü–æ–¥–≥—Ä—É–ø–ø–∞" if self.grouping_cb.isChecked() else None,
            show_detailed=self.detailed_cb.isChecked(),
            critical_min_inputs=self.min_inputs.value(),
            critical_min_reuse=self.min_reuse.value(),
            output_format=self.get_selected_format()
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.thread = GenerationThread(
            self.excel_path, 
            self.sheet_combo.currentText(), 
            choices
        )
        self.thread.finished.connect(self.generation_complete.emit)
        self.thread.start()
    
    def get_selected_format(self):
        for button in self.format_group.buttons():
            if button.isChecked():
                return button.property('format')
        return 'md'