"""
–≠–∫—Å–ø–æ—Ä—Ç –≤ HTML —Å Mermaid –¥–∏–∞–≥—Ä–∞–º–º–æ–π
"""
import json
from pathlib import Path
from typing import Dict, List
from models import Operation, Choices, AnalysisData
from exporters.mermaid_exporter import build_mermaid_html
from utils import safe_id, escape_text, clean_text
from config import ENCODING

def create_html_table(headers: List[str], data: List[Dict[str, str]]) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç HTML —Ç–∞–±–ª–∏—Ü—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    """
    if not data:
        return "<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</p>"
    
    html = ['<table border="1" style="border-collapse: collapse; width: 100%; margin: 10px 0;">']
    html.append('<thead><tr>')
    for header in headers:
        html.append(f'<th style="padding: 8px; background: #f0f0f0;">{header}</th>')
    html.append('</tr></thead>')
    html.append('<tbody>')
    for row in data:
        html.append('<tr>')
        for header in headers:
            value = str(row.get(header, ""))
            value = value.replace('\n', '<br>')
            html.append(f'<td style="padding: 8px;">{value}</td>')
        html.append('</tr>')
    html.append('</tbody></table>')
    return '\n'.join(html)

def generate_mermaid_html_file(mermaid_code: str, analysis_data: AnalysisData, operations: Dict[str, Operation], 
                              choices: Choices, available_columns: List[str], output_file: Path) -> None:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML —Ñ–∞–π–ª —Å Mermaid –¥–∏–∞–≥—Ä–∞–º–º–æ–π –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
    """
    analysis = analysis_data.analysis
    
    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü
    external_inputs = analysis.external_inputs
    final_outputs = analysis.final_outputs
    
    # –†–µ–µ—Å—Ç—Ä –æ–ø–µ—Ä–∞—Ü–∏–π
    op_rows = []
    critical_ops = {c.operation for c in analysis.critical_points}
    
    # –°–æ–∑–¥–∞–µ–º mapping –æ—Ç –≤—Ö–æ–¥–∞ –∫ –æ–ø–µ—Ä–∞—Ü–∏—è–º, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç
    from collections import defaultdict
    input_to_operations = defaultdict(list)
    for op in operations.values():
        for inp in op.inputs:
            if inp:
                input_to_operations[inp].append(op.name)
    
    for name, op in operations.items():
        is_merge = len(op.inputs) > 1
        is_split = any(len(input_to_operations.get(out, [])) > 1 for out in op.outputs)
        node_type = (
            "–°—É–ø–µ—Ä-–∫—Ä–∏—Ç–∏—á–Ω–∞—è" if name in critical_ops else
            "–°–ª–∏—è–Ω–∏–µ+–†–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏–µ" if is_merge and is_split else
            "–°–ª–∏—è–Ω–∏–µ" if is_merge else
            "–†–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏–µ" if is_split else
            "–û–±—ã—á–Ω—ã–π"
        )
        row_data = {
            "–û–ø–µ—Ä–∞—Ü–∏—è": name,
            "–í—Ö–æ–¥—ã": ", ".join(op.inputs) if op.inputs else "-",
            "–í—ã—Ö–æ–¥": ", ".join(op.outputs) if op.outputs else "-",
            "–¢–∏–ø —É–∑–ª–∞": node_type,
        }
        if '–ì—Ä—É–ø–ø–∞' in available_columns:
            row_data["–ì—Ä—É–ø–ø–∞"] = op.group
        if '–í–ª–∞–¥–µ–ª–µ—Ü' in available_columns:
            row_data["–í–ª–∞–¥–µ–ª–µ—Ü"] = op.owner
        if '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏' in available_columns:
            row_data["–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"] = op.detailed
            
        op_rows.append(row_data)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    available_cols = {
        'group': '–ì—Ä—É–ø–ø–∞' in available_columns,
        'owner': '–í–ª–∞–¥–µ–ª–µ—Ü' in available_columns,
        'detailed_desc': '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏' in available_columns
    }

    html_content = f'''<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–î–∏–∞–≥—Ä–∞–º–º–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞</title>
    <script type="module">
        import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.esm.min.mjs';
        mermaid.initialize({{ 
            startOnLoad: true,
            theme: 'default',
            securityLevel: 'loose'
        }});
    </script>
    <style>
        body {{
            font-family: Arial, sans-serif;
            margin: 20px;
            line-height: 1.6;
            overflow-x: hidden;
        }}
        .diagram-container {{
            border: 1px solid #ccc;
            padding: 20px;
            margin: 20px 0;
            background: white;
            border-radius: 5px;
            overflow: auto;
            width: 100%;
            min-height: 600px;
            cursor: move;
        }}
        .diagram-container:active {{
            cursor: grabbing;
        }}
        .controls {{
            margin: 10px 0;
            padding: 10px;
            background: #f5f5f5;
            border-radius: 5px;
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            align-items: center;
        }}
        button {{
            padding: 8px 15px;
            background: #007cba;
            color: white;
            border: none;
            border-radius: 3px;
            cursor: pointer;
            font-size: 14px;
        }}
        button:hover {{
            background: #005a87;
        }}
        .zoom-info {{
            padding: 8px 15px;
            background: #e7f3ff;
            border-radius: 3px;
            font-size: 14px;
            min-width: 120px;
            text-align: center;
        }}
        h1, h2, h3 {{
            color: #333;
        }}
        .analysis-section {{
            background: #f9f9f9;
            padding: 15px;
            margin: 15px 0;
            border-radius: 5px;
        }}
        .legend {{
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin: 15px 0;
        }}
        .legend-item {{
            display: flex;
            align-items: center;
            margin-right: 20px;
        }}
        .legend-color {{
            width: 20px;
            height: 20px;
            margin-right: 5px;
            border: 1px solid #333;
        }}
        table {{
            width: 100%;
            margin: 15px 0;
        }}
        .mermaid {{
            transform-origin: 0 0;
            transition: transform 0.2s ease;
            min-width: min-content;
        }}
        .fullscreen {{
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            background: white;
            z-index: 1000;
            padding: 20px;
        }}
        .fullscreen-controls {{
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1001;
            display: flex;
            gap: 10px;
        }}
        .zoom-slider {{
            width: 150px;
            margin: 0 10px;
        }}
        .control-group {{
            display: flex;
            align-items: center;
            gap: 5px;
            margin: 0 10px;
        }}
    </style>
</head>
<body>
    <h1>–î–∏–∞–≥—Ä–∞–º–º–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–∞</h1>
    
    <div class="controls">
        <strong>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º–æ–π:</strong>
        <div class="control-group">
            <button onclick="zoomOut()">‚àí</button>
            <input type="range" min="10" max="300" value="100" class="zoom-slider" id="zoomSlider" oninput="updateZoomFromSlider(this.value)">
            <button onclick="zoomIn()">+</button>
            <div class="zoom-info" id="zoomInfo">100%</div>
        </div>
        <button onclick="resetZoom()">–°–±—Ä–æ—Å (100%)</button>
        <button onclick="fitToScreen()">–í–º–µ—Å—Ç–∏—Ç—å –≤ —ç–∫—Ä–∞–Ω</button>
        <button onclick="toggleFullscreen()">–ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω ‚õ∂</button>
        <div style="margin-left: auto; font-size: 12px; color: #666;">
            üîç Ctrl+–∫–æ–ª–µ—Å–æ –¥–ª—è –∑—É–º–∞ ‚Ä¢ üñ±Ô∏è –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        </div>
    </div>
    
    <div class="diagram-container" id="diagramContainer">
        <div class="mermaid" id="mermaidDiagram">
{mermaid_code}
        </div>
    </div>
    
    <div class="legend">
        <div class="legend-item"><div class="legend-color" style="background: yellow;"></div> –í–Ω–µ—à–Ω–∏–µ –≤—Ö–æ–¥—ã</div>
        <div class="legend-item"><div class="legend-color" style="background: red;"></div> –ö–æ–Ω–µ—á–Ω—ã–µ –≤—ã—Ö–æ–¥—ã</div>
        <div class="legend-item"><div class="legend-color" style="background: orange;"></div> –û–ø–µ—Ä–∞—Ü–∏–∏ —Å–ª–∏—è–Ω–∏—è</div>
        <div class="legend-item"><div class="legend-color" style="background: purple;"></div> –û–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏—è</div>
        <div class="legend-item"><div class="legend-color" style="background: #ff4444;"></div> –°—É–ø–µ—Ä-–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</div>
    </div>

    <div class="analysis-section">
        <h2>–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞</h2>
        <h3>–°—É–ø–µ—Ä-–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</h3>
'''

    if analysis.critical_points:
        html_content += '<ul>'
        for cp in sorted(analysis.critical_points, key=lambda x: (x.inputs_count, x.output_reuse), reverse=True):
            html_content += f'<li><strong>{cp.operation}</strong>: {cp.inputs_count} –≤—Ö–æ–¥–æ–≤, –≤—ã—Ö–æ–¥ –∏–¥—ë—Ç –≤ {cp.output_reuse} –æ–ø–µ—Ä–∞—Ü–∏–π</li>'
        html_content += '</ul>'
    else:
        html_content += '<p>–¢–∞–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ—Ç</p>'
    
    html_content += f'''
        <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞</h3>
        <p><strong>–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π:</strong> {analysis.operations_count}</p>
        <p><strong>–í–Ω–µ—à–Ω–∏–µ –≤—Ö–æ–¥—ã:</strong> {len(analysis.external_inputs)}</p>
        <p><strong>–ö–æ–Ω–µ—á–Ω—ã–µ –≤—ã—Ö–æ–¥—ã:</strong> {len(analysis.final_outputs)}</p>
        <p><strong>–û–ø–µ—Ä–∞—Ü–∏–π —Å–ª–∏—è–Ω–∏—è:</strong> {len(analysis.merge_points)}</p>
        <p><strong>–û–ø–µ—Ä–∞—Ü–∏–π —Ä–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏—è:</strong> {len(analysis.split_points)}</p>
        <p><strong>–°—É–ø–µ—Ä-–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:</strong> {len(analysis.critical_points)}</p>
    </div>

    <h2>–†–µ–µ—Å—Ç—Ä –æ–ø–µ—Ä–∞—Ü–∏–π</h2>
'''

    table_headers = ["–û–ø–µ—Ä–∞—Ü–∏—è"]
    if available_cols['group']:
        table_headers.append("–ì—Ä—É–ø–ø–∞")
    if available_cols['owner']:
        table_headers.append("–í–ª–∞–¥–µ–ª–µ—Ü")
    table_headers.extend(["–í—Ö–æ–¥—ã", "–í—ã—Ö–æ–¥", "–¢–∏–ø —É–∑–ª–∞"])
    if available_cols['detailed_desc']:
        table_headers.append("–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
    
    html_content += create_html_table(table_headers, op_rows)

    html_content += '''
    <script>
        let scale = 1.0;
        let isFullscreen = false;
        let isDragging = false;
        let startX, startY, scrollLeft, scrollTop;
        const mermaidDiagram = document.getElementById('mermaidDiagram');
        const zoomInfo = document.getElementById('zoomInfo');
        const zoomSlider = document.getElementById('zoomSlider');
        const diagramContainer = document.getElementById('diagramContainer');
        
        function updateZoomInfo() {
            const percentage = Math.round(scale * 100);
            zoomInfo.textContent = `${percentage}%`;
            zoomSlider.value = percentage;
            mermaidDiagram.style.transform = `scale(${scale})`;
        }
        
        function updateZoomFromSlider(value) {
            scale = parseInt(value) / 100;
            updateZoomInfo();
        }
        
        function zoomIn() {
            scale = Math.min(3.0, scale + 0.1);
            updateZoomInfo();
        }
        
        function zoomOut() {
            scale = Math.max(0.1, scale - 0.1);
            updateZoomInfo();
        }
        
        function resetZoom() {
            scale = 1.0;
            updateZoomInfo();
            // –°–±—Ä–æ—Å —Å–∫—Ä–æ–ª–ª–∞ –∫ —Ü–µ–Ω—Ç—Ä—É
            setTimeout(() => {
                diagramContainer.scrollLeft = (diagramContainer.scrollWidth - diagramContainer.clientWidth) / 2;
                diagramContainer.scrollTop = (diagramContainer.scrollHeight - diagramContainer.clientHeight) / 2;
            }, 100);
        }
        
        function fitToScreen() {
            const svg = mermaidDiagram.querySelector('svg');
            if (svg) {
                const containerWidth = diagramContainer.clientWidth - 40;
                const containerHeight = diagramContainer.clientHeight - 40;
                const svgWidth = svg.getBoundingClientRect().width;
                const svgHeight = svg.getBoundingClientRect().height;
                
                const scaleX = containerWidth / svgWidth;
                const scaleY = containerHeight / svgHeight;
                scale = Math.min(scaleX, scaleY);
                updateZoomInfo();
                
                // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ—Å–ª–µ –ø–æ–¥–≥–æ–Ω–∫–∏
                setTimeout(() => {
                    diagramContainer.scrollLeft = (diagramContainer.scrollWidth - diagramContainer.clientWidth) / 2;
                    diagramContainer.scrollTop = (diagramContainer.scrollHeight - diagramContainer.clientHeight) / 2;
                }, 100);
            }
        }
        
        function toggleFullscreen() {
            if (!isFullscreen) {
                diagramContainer.classList.add('fullscreen');
                isFullscreen = true;
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                const exitButton = document.createElement('button');
                exitButton.textContent = '‚úï –í—ã–π—Ç–∏';
                exitButton.onclick = toggleFullscreen;
                exitButton.style.cssText = 'padding: 10px 15px; background: #dc3545; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 14px;';
                exitButton.id = 'exitFullscreen';
                
                const fullscreenControls = document.createElement('div');
                fullscreenControls.className = 'fullscreen-controls';
                fullscreenControls.appendChild(exitButton);
                document.body.appendChild(fullscreenControls);
                
                // –ü–æ–¥–≥–æ–Ω—è–µ–º –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
                setTimeout(fitToScreen, 100);
            } else {
                diagramContainer.classList.remove('fullscreen');
                isFullscreen = false;
                const fullscreenControls = document.querySelector('.fullscreen-controls');
                if (fullscreenControls) {
                    fullscreenControls.remove();
                }
                resetZoom();
            }
        }
        
        // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã
        diagramContainer.addEventListener('mousedown', (e) => {
            if (e.button === 0) { // –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
                isDragging = true;
                startX = e.pageX - diagramContainer.offsetLeft;
                startY = e.pageY - diagramContainer.offsetTop;
                scrollLeft = diagramContainer.scrollLeft;
                scrollTop = diagramContainer.scrollTop;
                diagramContainer.style.cursor = 'grabbing';
            }
        });
        
        diagramContainer.addEventListener('mouseleave', () => {
            isDragging = false;
            diagramContainer.style.cursor = 'move';
        });
        
        diagramContainer.addEventListener('mouseup', () => {
            isDragging = false;
            diagramContainer.style.cursor = 'move';
        });
        
        diagramContainer.addEventListener('mousemove', (e) => {
            if (!isDragging) return;
            e.preventDefault();
            const x = e.pageX - diagramContainer.offsetLeft;
            const y = e.pageY - diagramContainer.offsetTop;
            const walkX = (x - startX) * 2; // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å–∫—Ä–æ–ª–ª–∞
            const walkY = (y - startY) * 2;
            diagramContainer.scrollLeft = scrollLeft - walkX;
            diagramContainer.scrollTop = scrollTop - walkY;
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && isFullscreen) {
                toggleFullscreen();
            }
            if ((e.ctrlKey || e.metaKey) && !e.altKey) {
                if (e.key === '=' || e.key === '+') {
                    e.preventDefault();
                    zoomIn();
                } else if (e.key === '-') {
                    e.preventDefault();
                    zoomOut();
                } else if (e.key === '0') {
                    e.preventDefault();
                    resetZoom();
                } else if (e.key === '1') {
                    e.preventDefault();
                    fitToScreen();
                }
            }
        });
        
        // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏ —Å –∑–∞–∂–∞—Ç—ã–º Ctrl
        diagramContainer.addEventListener('wheel', (e) => {
            if (e.ctrlKey) {
                e.preventDefault();
                const rect = diagramContainer.getBoundingClientRect();
                const mouseX = e.clientX - rect.left;
                const mouseY = e.clientY - rect.top;
                
                const zoomIntensity = 0.001;
                const wheel = e.deltaY < 0 ? 1 : -1;
                const newScale = Math.max(0.1, Math.min(3.0, scale + wheel * zoomIntensity * 50));
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –º—ã—à–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–∏–∞–≥—Ä–∞–º–º—ã
                const scaleChange = newScale / scale;
                diagramContainer.scrollLeft = (diagramContainer.scrollLeft + mouseX) * scaleChange - mouseX;
                diagramContainer.scrollTop = (diagramContainer.scrollTop + mouseY) * scaleChange - mouseY;
                
                scale = newScale;
                updateZoomInfo();
            }
        }, { passive: false });
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ Mermaid
        setTimeout(() => {
            updateZoomInfo();
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ–º –ø–æ–¥ —ç–∫—Ä–∞–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            setTimeout(() => {
                fitToScreen();
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
                diagramContainer.style.cursor = 'move';
            }, 500);
        }, 1000);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', () => {
            if (isFullscreen) {
                setTimeout(fitToScreen, 100);
            }
        });
    </script>
</body>
</html>'''

    output_file.write_text(html_content, encoding=ENCODING)

def export_html_mermaid(operations: Dict[str, Operation], analysis_data: AnalysisData, 
                       choices: Choices, available_columns: List[str], output_base: str = None) -> None:
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É –≤ HTML —Å Mermaid
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if output_base is None:
        output_base = "business_process_diagram"
    
    output_file = Path(f"{output_base}.html")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Mermaid –∫–æ–¥–∞
    mermaid_code = build_mermaid_html(operations, analysis_data, choices)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Ñ–∞–π–ª–∞
    generate_mermaid_html_file(mermaid_code, analysis_data, operations, choices, available_columns, output_file)
    
    print(f"\n" + "="*60)
    print("‚úì HTML-–î–ò–ê–ì–†–ê–ú–ú–ê –° MERMAID –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù–ê!")
    print("="*60)
    print(f"–§–∞–π–ª: {output_file}")